= Java Sources =

== Description ==

There is very rudimentary support for compiling Java sources in `sbt`.  It comes with almost none of the usual `sbt` features for Scala sources and is not very flexible yet.  In particular,
 * The compiler used is the `javac` on your path.
 * There is no interdependency tracking between Java sources
 * There is no tracking between Java sources and their generated class files.
 * There is no support for running tests written in Java

A scala file depending on a changed java file *will* get recompiled properly.  Nevertheless, you might want to run 'clean' before 'compile' if you change your java sources and want to be sure of correct recompilation.

== Usage ==

 * `compile` will compile the sources under `src/main/java`
 * `test-compile` will compile the sources under `src/main/java`.
 
Pass options to the Java compiler by adding instances of `JavaCompileOption` to your `compileOptions`.  For example:
{{{
  override def compileOptions = JavaCompileOption("-g:none") :: super.compileOptions.toList
}}}

You can specify the order in which Scala and Java sources are built with the `buildOrder` method.  Possible values are from the `BuildOrder` enumeration: `Mixed`, `JavaThenScala`, and `ScalaThenJava`.  If you have circular dependencies between Scala and Java sources, you need the default, `Mixed`, which passes both Java and Scala sources to `scalac` and then compiles the Java sources with `javac`.  If you do not have circular dependencies, you can use one of the other two options to speed up your build by not passing the Java sources to `scalac`.  For example, if your Scala sources depend on your Java sources, but your Java sources do not depend on your Scala sources, you can do:
{{{
  override def buildOrder = BuildOrder.JavaThenScala
}}}