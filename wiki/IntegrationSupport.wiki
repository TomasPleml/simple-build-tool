= Introduction =

This page describes approaches to using `sbt` with third-party tools.  It is a work in progress.

= Emacs =

There is a [http://github.com/RayRacine/scallap/tree/master/tools/emacs script] to run `sbt` as an inferior-mode process from within emacs.  It uses `compile.el` well, allowing one to migrate through the compiler errors.

= Eclipse =

There are currently two options for Eclipse integration.  There is an [http://github.com/frank06/sbt-eclipse-plugin/ Eclipse plugin] to pick up dependencies from your `lib_managed` directory.  Another approach using IvyDE is described below.

=== Initial Setup ===

 # Install [http://ant.apache.org/ivy/ivyde/ IvyDE]
 # Set up your `sbt` project (dependencies, repos, settings, ...)
 # Issue `reload` and `deliver-local` at the `sbt` prompt.
 # Set up the Eclipse classpath container using IvyDE as follows:
  # Go to `project properties -> Java Build Path`. Make sure you use the same version of Scala in both Eclipse and `sbt`.
  # Then, `Add Library... -> IvyDE managed dependencies -> Ivy file: target/ivy-1.0.xml`.  Select appropriate configurations.
 
=== Updating ===

 # Add/remove dependencies in your project definition.
 # Issue `reload` and `deliver-local` in the `sbt` console
 # Update Eclipse classpath container as follows: right-click on the Ivy container in your project (should look like: `target/ivy-1.0.xml [compile]`) and click on the bottommost `Refresh` (not the one with `F5`, but just below `Resolve`)