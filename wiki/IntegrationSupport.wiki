= Introduction =

This page describes approaches to using `sbt` with third-party tools.  It is a work in progress.

= Emacs =

There is a [http://github.com/RayRacine/scallap/tree/master/tools/emacs script] to run `sbt` as an inferior-mode process from within emacs.  It uses `compile.el`, allowing one to migrate through the compiler errors.

On Windows, disable the native JLine interface using by adding the system property
{{{
-Djline.WindowsTerminal.directConsole=false
}}}
to your `sbt` startup script or disable JLine support completely with the system property:
{{{
-Djline.terminal=jline.UnsupportedTerminal
}}}

You may want to make your sbt startup script look something like the following:
{{{
if "%TERM%"=="emacs" set jlineopt=-Djline.WindowsTerminal.directConsole=false
java -Xmx512M %jlineopt% -jar ...
}}}

(From the comments in [http://code.google.com/p/simple-build-tool/issues/detail?id=63 #63])

= Vim =

See [http://github.com/MarcWeber/vim-addon-sbt]

Alternatively:
In Vim, you can add the following to your `.vimrc` file to support building via `:make` and navigating to errors and warnings:

{{{
set makeprg=sbt\ compile
set efm=%E\ %#[error]\ %f:%l:\ %m,%C\ %#[error]\ %p^,%-C%.%#,%Z,
       \%W\ %#[warn]\ %f:%l:\ %m,%C\ %#[warn]\ %p^,%-C%.%#,%Z,
       \%-G%.%#
}}}

You'll need to `cd` into your project root to issue the `:make` command. 

= !TextMate =

See [http://www.sidewayscoding.com/2010/08/using-textmate-for-scala-development.html].

= IDEA =

sbt plugin/processor: [https://github.com/mpeltonen/sbt-idea]

IDEA plugin: [http://plugins.intellij.net/plugin/?idea&id=5007]

= Eclipse =

There are currently three options for Eclipse integration.
 # There is an [http://github.com/frank06/sbt-eclipse-plugin/ Eclipse plugin] to pick up dependencies from your `lib_managed` directory.
 # There is another [http://github.com/musk/SbtEclipsify Eclipse plugin] to create an Eclipse project from an `sbt` project.  See the [http://groups.google.com/group/simple-build-tool/msg/89b5b0c422cc1d58 mailing list post] for details.
 # Use IvyDE as described below.

== IvyDE approach ==

=== Initial Setup ===

 # Install [http://ant.apache.org/ivy/ivyde/ IvyDE]
 # Set up your `sbt` project (dependencies, repos, settings, ...)
 # Issue `reload` and `deliver-local` at the `sbt` prompt.
 # Set up the Eclipse classpath container using IvyDE as follows:
  # Go to `project properties -> Java Build Path`. Make sure you use the same version of Scala in both Eclipse and `sbt`.
  # Then, `Add Library... -> IvyDE managed dependencies -> Ivy file: target/ivy-1.0.xml`.  Select appropriate configurations.
 
=== Updating ===

 # Add/remove dependencies in your project definition.
 # Issue `reload` and `deliver-local` in the `sbt` console
 # Update Eclipse classpath container as follows: right-click on the Ivy container in your project (should look like: `target/ivy-1.0.xml [compile]`) and click on the bottommost `Refresh` (not the one with `F5`, but just below `Resolve`)

= Jenkins =

Jenkins plugin: [http://wiki.jenkins-ci.org/display/JENKINS/sbt+plugin].

= JEdit =

JEdit plugin: [https://github.com/StefanE/SBT4jEdit]