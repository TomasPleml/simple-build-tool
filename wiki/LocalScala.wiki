== Setup ==

 # Get the 0.4.6 loader setup on your system (proguard is used on the loader, so it is self contained) according to the [Setup#Launching_Sbt Launching Sbt] section.
 # Checkout `sbt`
{{{
  svn checkout http://simple-build-tool.googlecode.com/svn/trunk/ sbt
}}}
3) Edit `$SBT_HOME/project/build/src/CrossCompileProject.scala`:
  a) Change the 2.8 version string to identify the local Scala version (around line 17)
{{{
    private val version2_8_0 = "2.8.0-local"
}}}
  b) To save time by building only 2.8 make these changes to lines 20 and 30:
{{{
    private def developmentVersion = version2_8_0
    private val buildConfigurations = conf_2_8_0 :: Nil
}}}
4) For the Scala build you want to use, put the [LocalScala#Project_Definition project definition below] in:
{{{
  $SCALA_HOME/project/build/src/ScalaJars.scala
}}}
This is just a quick definition to locally publish the already built jars `build/pack/lib/scala-compiler.jar` and `build/pack/lib/scala-library.jar`.  In `$SCALA_HOME`, do:
{{{
  $ sbt publish-local
}}}
5) Then, run the following in `$SBT_HOME`
{{{
  $ sbt
  > update
  > cross-publish-local
}}}
6) Run `sbt` in your project directory.  You will be prompted for name, organization and version.  Enter `2.8.0-local` for Scala and `0.4.7-SNAPSHOT` for `sbt`.  You should be all set now.  When you want to update the compiler follow the steps in the next section.

== New compiler ==
For a new compiler:
 # In `$SCALA_HOME`, after building the new Scala version,
{{{
   $ sbt publish-local
}}}
 # In `$SBT_HOME`
{{{
   $ sbt
   > clean-lib
   > update
   > cross-publish-local
}}}
 # Remove the `project/boot` directory from your project (`sbt` is not designed to update Scala jars after they have been copied to a project, so you have to manually delete them.  If this is popular, maybe this could change.)
 # Then, run `sbt` on your project as normal.

== Project Definition ==

{{{
import sbt._

class ScalaJars(info: ProjectInfo) extends ParentProject(info)
{ top =>
  override def outputPath: Path = "build"
  val library = project(".", "Scala Library", info => new SubProject(info))
  val compiler = project(".", "Scala Compiler", info => new SubProject(info))

  override def shouldCheckOutputDirectories = false

  class SubProject(info: ProjectInfo) extends ParentProject(info)
  {
    val default = config("default")
    override def outputPath = top.outputPath / "pack" / "lib"
    override def shouldCheckOutputDirectories = false
    override def publishLocalConfiguration = new DefaultPublishConfiguration("local", "release", true) {
      override def srcArtifactPatterns: Iterable[String] = List(outputPath / "[artifact].[ext]").map(_.relativePath)
    }
  }
}
}}}