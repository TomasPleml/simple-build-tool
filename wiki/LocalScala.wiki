There are two ways to use `sbt` with Scala 2.8 (the trunk version of Scala).  Both ways involve building `sbt` locally.  The first way is easier and can be used if you want to work with nightly snapshots.  The second way is required if you want to use a custom build of Scala.

= Scala Nightly Build =

== Setup ==

 # Get the `sbt` loader set up on your system according to the [Setup#Launching_Sbt Launching Sbt] section.
 # Checkout `sbt`
{{{
 $ svn checkout http://simple-build-tool.googlecode.com/svn/trunk/ sbt
}}}
 # Build `sbt` by running `sbt` in the checked out directory, do:
{{{
 $ sbt
 > update
 > cross-publish-local
}}}
 # Use this local version of `sbt` in your project by setting your `sbt.version` to `0.5.4-SNAPSHOT` and your `scala.version` to `2.8.0-SNAPSHOT` (or one of the 2.7.x versions of Scala).

== New Nightly ==

To update to the latest 2.8 nightly,
 # Rebuild `sbt` against this nightly.  If the latest nightly breaks `sbt` compilation, send a message to the mailing list to get it fixed.  In the checked out `sbt` directory, do the following:
{{{
 $ sbt
 > clean-lib
 > update
 > cross-publish-local
}}}
 # Remove the `project/boot` directory from your project (`sbt` is designed to not update Scala jars after they have been copied to a project, so you have to manually delete them to get the latest -SNAPSHOT version.)
 # Run `sbt` on your project as usual.
 

= Custom Scala Build =

== Setup ==

 # Get the `sbt` loader set up on your system according to the [Setup#Launching_Sbt Launching Sbt] section.
 # Checkout `sbt`
{{{
 svn checkout http://simple-build-tool.googlecode.com/svn/trunk/ sbt
}}}
 # Edit `$SBT_HOME/project/build/CrossCompileProject.scala`:
  # Change the 2.8 version string to identify the local Scala version (around line 18)
{{{
  private val version2_8_0 = "2.8.0-local"
}}}
  # To save time by building only 2.8 make this change to line 31:
{{{
  private val buildConfigurations = conf_2_8_0 :: Nil
}}}
 # For the Scala build you want to use, put the [LocalScala#Project_Definition project definition below] in:
{{{
 $SCALA_HOME/project/build/ScalaJars.scala
}}}
 # This is just a quick definition to locally publish the already built jars `build/pack/lib/scala-compiler.jar` and `build/pack/lib/scala-library.jar`.  In `$SCALA_HOME`, do:
{{{
 $ sbt publish-local
}}}
 # Then, run the following in `$SBT_HOME`
{{{
 $ sbt
 > update
 > cross-publish-local
}}}
 # Run `sbt` in your project directory.  You will be prompted for name, organization and version.  Enter `2.8.0-local` for Scala and `0.5.3-SNAPSHOT` for `sbt`.  You should be all set now.  When you want to update the compiler follow the steps in the next section.

== New compiler ==
For a new compiler:
 # In `$SCALA_HOME`, after building the new Scala version,
{{{
   $ sbt publish-local
}}}
 # In `$SBT_HOME`
{{{
   $ sbt
   > clean-lib
   > update
   > cross-publish-local
}}}
 # Remove the `project/boot` directory from your project (`sbt` is not designed to update Scala jars after they have been copied to a project, so you have to manually delete them.  If using a local Scala version is popular, maybe this could change.)
 # Then, run `sbt` on your project as normal.

== Project Definition ==

{{{
import sbt._

class ScalaJars(info: ProjectInfo) extends ParentProject(info)
{ top =>
  override def outputPath: Path = "build"
  val library = project(".", "Scala Library", info => new SubProject(info))
  val compiler = project(".", "Scala Compiler", info => new SubProject(info))

  override def shouldCheckOutputDirectories = false

  class SubProject(info: ProjectInfo) extends ParentProject(info)
  {
    val default = config("default")
    override def outputPath = top.outputPath / "pack" / "lib"
    override def shouldCheckOutputDirectories = false
    override def publishLocalConfiguration = new DefaultPublishConfiguration("local", "release", true) {
      override def srcArtifactPatterns: Iterable[String] = List(outputPath / "[artifact].[ext]").map(_.relativePath)
    }
  }
}
}}}