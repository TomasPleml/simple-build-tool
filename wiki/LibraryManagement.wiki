= Introduction =

There are two ways for you to manage libraries with `sbt`, manually or automatically.  These two ways can be mixed as well.

<wiki:toc max_depth="3" />

= Manual Dependency Management =

Manually managing dependencies involves copying any jars that you want to use to the `lib` directory.  `sbt` will put these jars on the classpath during compilation, testing, running, and when using the interpreter.  You are responsible for adding, removing, updating, and otherwise managing the jars in this directory.  No modifications to your [BuildConfiguration project definition] are required to use this method unless you would like to change the location of the directory you store the jars in.

= Automatic Dependency Management =

This method of dependency management involves specifying the direct dependencies of your project and letting `sbt` handle retrieving and updating your dependencies.

== Usage ==

`sbt` performs this dependency handling when the `update` action is executed.  By default, `sbt` does *not* update your dependencies before every compilation, but only does so when you execute `update`.  `sbt` supports three ways of specifying these dependencies:
 * Declarations in your project definition
 * Maven POM files
 * Ivy configuration and settings files

`sbt` uses [http://ant.apache.org/ivy/ Apache Ivy] to implement dependency management in all three cases.  If multiple configurations are present, the following precedence is used by default:
 * Inline repositories take precedence over configuration done in `ivysettings.xml`.
 * Maven and Ivy configurations (`pom.xml` and `ivy.xml`) are ignored when inline dependency declarations are present.  Note that `ivysettings.xml` can be used with inline dependencies if no inline repositories are used.
 * A Maven configuration `pom.xml` is ignored when an Ivy `ivy.xml` configuration is present.  Note that `ivysettings.xml` can be used with a Maven `pom.xml`.

The default repositories when `ivysettings.xml` is not present are the standard Maven2 repository and the Scala Tools Releases (http://scala-tools.org/repo-releases) repository.

The following sections describe how to use each method of automatic dependency management.

=== Inline Declarations ===

Inline declarations are a very basic way of specifying the dependencies to be automatically retrieved.  They are intended as a lightweight alternative to a full configuration using Ivy or Maven.  To use inline declarations, do the following:

 * Declare each dependency in your [BuildConfiguration project definition] as a `val` with the form:
 {{{
  val dep = groupID % artifactID % revision
 }}}
 or
 {{{
  val dep = groupID % artifactID % revision % configuration
 }}}
 The actual identifier for the `val` is currently unimportant.  See [Configurations] for details on configuration mappings.  If you are using a dependency that was built using `sbt`'s [CrossBuild cross-building], double the first `%` to be `%%`:
 {{{
  val dep = groupID %% artifactID % revision
 }}}
 This will download the right jar for the dependency built with the version of Scala that you are currently using.  See [CrossBuild cross-building] for details.
 
 * Declare additional repositories besides the default Maven2 and Scala Tools Releases repositories that you want to use with the form:
 {{{
  val rep = name at location
 }}}
 (The actual identifier for the `val` is unimportant except for publishing.)

For example:
{{{
  val derby = "org.apache.derby" % "derby" % "10.4.1.3"
  val specs = "org.specs" % "specs" % "1.4.1"

  val scalaToolsSnapshots = "Scala-Tools Maven2 Snapshots Repository" at "http://scala-tools.org/repo-snapshots"
}}}

`sbt` can search your local Maven repository if you add it as a repository:
{{{
  val mavenLocal = "Local Maven Repository" at "file://"+Path.userHome+"/.m2/repository"
}}}
See [Resolvers] for details on defining other types of repositories.


If your project requires a dependency that is not present in a Maven repository, a direct URL to its jar can be specified as follows:

{{{
  val slinky = "slinky" % "slinky" % "2.1" from "http://slinky2.googlecode.com/svn/artifacts/2.1/slinky.jar"
}}}

By default, these declarations fetch all project dependencies. In some instances, you may find that the dependencies listed for a project aren't necessary for it to build. Projects using the Felix OSGI framework, for instance, only explicitly require its main jar to compile and run. Avoid fetching artifact dependencies with either `intransitive()` or `notTransitive()`, as in this example:

{{{
  val felix = "org.apache.felix" % "org.apache.felix.framework" % "1.8.0" intransitive()
}}}

`sbt` additionally supports directly specifying the configurations or dependencies sections of an Ivy configuration file inline.  You can mix this with inline Scala dependency and repository declarations.

For example:
{{{
  override def ivyXML =
    <dependencies>
      <dependency org="javax.mail" name="mail" rev="1.4.2">
        <exclude module="activation"/>
      </dependency>
    </dependencies>
}}}

Yet another alternative is to declare the `Set` of all dependencies with the `libraryDependencies` method:

{{{
  override def libraryDependencies =
    Set("org.specs" % "specs" % "1.4.1",
    "org.apache.derby" % "derby" % "10.4.1.3")
}}}

If you want to use the `val`-style definitions as well, use:

{{{
  override def libraryDependencies =
    Set("org.specs" % "specs" % "1.4.1",
    "org.apache.derby" % "derby" % "10.4.1.3") ++
    super.libraryDependencies
}}}

A similar method exists for repositories and is called `repositories`.

Finally, see [Publishing] for how to publish your project.

=== Maven/Ivy ===

For this method, create the configuration files as you would for Maven (`pom.xml`) or Ivy (`ivy.xml` and optionally `ivysettings.xml`).  `sbt` will use these configurations to resolve and retrieve dependencies when you execute `update`.  No modifications to your project definition are necessary.

Maven support is dependent on Ivy's support for Maven POMs.
Known issues with this support:
 * Specifying `relativePath` in the `parent` section of a POM will produce an error.
 * Ivy ignores repositories specified in the POM.  A workaround is to specify repositories inline or in an Ivy `ivysettings.xml` file.