= Introduction =

This page describes build configuration for when the default actions or paths are not sufficient or appropriate for your project.

<wiki:toc max_depth="2" />

= Example =

This example will show you how to specify the main class executed by the `run` action.

First, create a new project:
{{{
$ sbt
> No project found. Create new project? (y/N) y
Project Name: Test Project
Version: 1.0
Create new project Test Project 1.0 ? (Y/n) y
}}}

Make a source file called

{{{
src/main/scala/Test.scala
}}}

with the following content:

{{{
object Test
{
  def main(args: Array[String])
  {
    println("Hello World!")
  }
}
}}}


Customize the build by creating a new file called
{{{
metadata/build/src/TestProject.scala
}}}

with the following content:

{{{
import sbt._

class TestProject(info: ProjectInfo) extends DefaultProject(info)
{
  override def mainClass = Some("Test")
}
}}}

Now, try it out:
{{{
$sbt
> run
...
Hello World!
...
}}}

On startup, `sbt` will compile `TestProject` and instantiate it.  When you execute the `run` action, `sbt` runs `Test` using the scala runner in the same virtual machine as `sbt`.  See RunningProjectCode for details.

Note: `sbt` only recompiles a project definition on startup.  If you are running in interactive mode, changes made to `TestProject` will not take effect until the next time you start sbt.

= Specifying Options =

Setting the main class was one case of specifying options for tasks (in that case, the `run` task).  The general mechanism for specifying options is with an overridable method that defines the list of options for a task.  For example, the default options for the `compile` task are defined as:

{{{
    def compileOptions: Seq[CompileOption] = Deprecation :: Nil
}}}

`Deprecation` is a val on `ScalaProject` that is an instance of `CompileOption` representing the command line `scalac` `-deprecation` option.  To additionally specify the `-unchecked` command line option, override `compileOptions` in your project definition (class `TestProject` above):

{{{
    override def compileOptions = Unchecked :: Deprecation :: Nil
}}}
or
{{{
    override def compileOptions = Unchecked :: super.compileOptions.toList
}}}


The currently available options are listed below.

== Compile Options ==

Method `compileOptions` specifies the options for task `compile` and is of type `Seq[CompileOption]`.  Provided options are:
  * `Deprecation`
  * `Unchecked`
  * `ExplainTypes`
  * `Optimize`
  * `Verbose`
  * `DisableWarnings`
  * `target(t: Target.Value)`   (accepts values of the `Target` enumeration: `Java1_5`, `Java1_4`, `Msil`)
  * `CompileOption(optionString)`   (for arbitrary options)

== Run Options ==

Method `mainClass` (as described above) is of type `Option[String]` and specifies an optional main class to run when the `run` task is invoked.  The default implementation specifies no main class (`None`).
Method `runOptions` is a list of arguments (`Seq[String]`) to the main class run by the  `run` task.  The default implementation is the empty sequence (`Nil`).

== Document Options ==

Method `documentOptions` specifies the options for the API documentation tasks `doc` and `docTests`.  Provided options are:
  * `LinkSource`
  * `NoComment`
  * `access(access: Access.Value)`
  * `documentBottom(bottomText: String)`
  * `documentCharset(charset: String)`
  * `documentTitle(title: String)`
  * `documentFooter(footerText: String)`
  * `documentHeader(headerText: String)`
  * `stylesheetFile(path: Path)`
  * `documentTop(topText: String)`
  * `windowTitle(title: String)`

== Test Options ==

Method `testOptions` specifies the options for the `test` action.  The only available option is `ExcludeTests(tests: Iterable[String])`, which specifies the class names of tests that should not be run.

== Dependency Management (Update) Options ==

Method `updateOptions` specifies the options for the dependency management task `update`.  Available options are:
 * `Validate`   Specifying this validates the configuration files (Maven or Ivy)
 * `Synchronize`   Specifying this removes libraries from the managed library directory that are not currently used.
 * `QuietUpdate`   Specifying this puts Ivy in quiet mode during execution.

= Changing Paths =

The only paths in `sbt` that are completely fixed are the locations of the files in the `metadata` directory.  The other paths, such as the path to sources, jars, and outputs, are configurable.  Overriding the default paths is described in this section.  See [Paths] for details on constructing paths.

Paths in `sbt` are incrementally built up out of path components so that you can easily rename any directory in the path or modify the path structure.

The paths and the names used to construct them are defined in `BasicProjectPaths`, which is mixed in to the default project definition, as members that you can override.  If you only want to rename a directory, override the member that specifies the name.  For example, to rename the output directory from `target` to `build`,

{{{
  override def outputDirectoryName = "build"
}}}

The outputs for compilation and API documentation are defined as:
{{{

  def compilePath = outputPath / compileDirectoryName
  def docPath = outputPath / docDirectoryName
  def graphPath = outputPath / graphDirectoryName
  def analysisPath = outputPath / analysisDirectoryName
}}}

and so the directory name will be used by subpaths as well.

Similarly, you could rearrange the source directory from
{{{
src/
  main/
    scala/
    resources/
  test/
    scala/
    resources/
}}}
to
{{{
src/
resources/
test-src/
test-resources/
}}}
by specifying the following in your project definition:
{{{
  override def mainScalaSourcePath = "src"
  override def mainResourcesPath = "resources"
	
  override def testScalaSourcePath = "test-src"
  override def testResourcesPath = "test-resources"

  override def allSources = (mainScalaSourcePath +++ mainResourcesPath +++ testScalaSourcePath +++ testResourcesPath) ** defaultIncludeAll
}}}

The redefinition of `allSources` is required for the `package-src` action.

The paths directly used by the default actions are listed below.  Other paths are only used to build up these paths.  If redefined, care should be taken to keep these paths distinct.
 * `dependencyPath`- This is the location to put jars.
 * `managedDependencyPath` - This is the location that automatic dependency management puts downloaded artifacts.  When executed, the `clean-lib` action removes this directory.
 * `mainScalaSourcePath` - The path to Scala sources comprising the project.
 * `mainResourcesPath` - The path to resources to include in the project jar.
 * `testScalaSourcePath` - The path to Scala sources defining tests.
 * `testResourcesPath` - The path to resources to include in the test jar.
 * `outputPath` - The path containing all `sbt`-generated files (besides the managed artifacts that go in `managedDependencyPath`).  All files generated by tasks should go in this directory.  When executed, the `clean` action removes this directory.
  * `mainDocPath` - The path where API documentation for main sources goes.
  * `testDocPath` - The path where API documentation for test sources goes.
  * `compilePath` - The path where compiled classes go.
  * `analysisPath` - The path where the analysis done at compile time goes.  This includes files that record dependencies from the Scala sources and the class names of tests.