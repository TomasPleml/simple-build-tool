=== 0.1.6 to trunk ===

 * Added graph action to generate dot files (for graphiz) from dependency information (work in progress).
 * Options are now passed to tasks as varargs.
 * Redesigned `Path` properly.
 * Moved paths out of `ScalaProject` and into `BasicProjectPaths` to keep path definitions separate from task definitions.
 * Added initial support for managing third-party libraries through the `update` task, which must be explicitly called (it is not a dependency of compile or any other task).  This is still quite experimental and its behavior is likely to change! (not to mention that it is undocumented)
 * Parallel execution implementation at the project level.  Disabled by default until logging situation figured out. To enable, add:
 {{{
 override def parallelExecution = true
 }}}
 to your project definition.  Nothing special is done to make logging more useful yet.
 * `run` and `console` are now specified as "interactive" actions, which means they are only executed on the project in which they are defined when called directly, and not on all dependencies.  Their dependencies are still run on dependent projects.
 * Generalized conditional tasks a bit.


=== 0.1.5 to 0.1.6 ===

 * `run` and `console` handle `System.exit` and multiple threads in user code under certain circumstances (see RunningProjectCode).

=== 0.1.4 to 0.1.5 ===

 * Generalized interface with plugin (see `AnalysisCallback`)
 * Split out task implementations and paths from `Project` to `ScalaProject`
 * Subproject support (changed required project constructor signature: see `sbt/DefaultProject.scala`)
  * Can specify dependencies between projects
  * Execute tasks across multiple projects
  * Classpath of all dependencies included when compiling
  * Proper inter-project source dependency handling
  * Can change to a project in an interactive session to work only on that project (and its dependencies)
 * External dependency handling
  * Tracks non-source dependencies (compiled classes and jars)
  * Requires each class to be provided by exactly one classpath element (This means you cannot have two versions of the same class on the classpath, e.g. from two versions of a library)
  * Changes in a project propagate the right source recompilations in dependent projects
  * Consequences:
   * Recompilation when changing java/scala version
   * Recompilation when upgrading libraries (again, as indicated in the second point, situations where you have library-1.0.jar and library-2.0.jar on the classpath at the same time are not handled predictably.  Replacing library-1.0.jar with library-2.0.jar should work as expected.)
   * Changing sbt version will recompile project definitions

=== 0.1.3 to 0.1.4 ===

 * Autodetection of Project definitions.
 * Simple tab completion/history in an interactive session with JLine
 * Added descriptions for most actions

=== 0.1.2 to 0.1.3 ===

 * Dependency management between tasks and auto-discovery tasks.
 * Should work on Windows.

=== 0.1.1 to 0.1.2 ===

 * Should compile/build on Java 1.5
 * Fixed run action implementation to include scala library on classpath
 * Made project configuration easier (see BuildConfiguration in the Wiki)

=== 0.1 to 0.1.1 ===

 * Fixed handling of source files without a package
 * Added easy project setup