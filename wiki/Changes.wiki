=== 0.3.6 to 0.3.7 (trunk) ===
 * Improved classpath methods
 * Refactored various features into separate project traits
 * `ParentProject` can now specify dependencies
 * Support for `optional` scope
 * More API documentation
 * Test resource paths provided on classpath for testing
 * Added some missing read methods in `FileUtilities`
 * Added scripted test framework
 * Change detection using hashes of files
 * Fixed problem with manifests not being generated (bug #14)
 * Fixed issue with scala-tools repository not being included by default (again)
 * Added option to set ivy cache location (mainly for testing)
 * trace is no longer a logging level but a flag enabling/disabling stack traces
 * Project.loadProject and related methods now accept a Logger to use

=== 0.3.5 to 0.3.6 ===
 * Fixed bug #12.
 * Compiled with 2.7.2.

=== 0.3.2 to 0.3.5 ===
 * Fixed bug #11.
 * Fixed problem with dependencies where source jars would be used instead of binary jars.
 * Fixed scala-tools not being used by default for inline configurations.
 * Small dependency management error message correction
 * Slight refactoring for specifying whether scala-tools releases gets added to configured resolvers
 * Separated repository/dependency overriding so that repositories can be specified inline for use with `ivy.xml` or `pom.xml` files
 * Added ability to specify Ivy XML configuration in Scala.
 * Added `clean-cache` action for deleting Ivy's cache
 * Some initial work towards accessing a resource directory from tests
 * Initial tests for `Path`
 * Some additional `FileUtilities` methods, some `FileUtilities` method adjustments and some initial tests for `FileUtilities`
 * A basic framework for testing `ReflectUtilities`, not run by default because of run time
 * Minor cleanup to `Path` and added non-empty check to path components
 * Catch additional exceptions in `TestFramework`
 * Added `copyTask` task creation method.
 * Added `jetty-run` action and added ability to package war files.
 * Added `jetty-stop` action.
 * Added `console-quick` action that is the same as `console` but doesn't compile sources first.
 * Moved some custom `ClassLoader`s to `ClasspathUtilities` and improved a check.
 * Added ability to specify hooks to call before `sbt` shuts down.
 * Added `zip`, `unzip` methods to `FileUtilities`
 * Added `append` equivalents to `write*` methods in `FileUtilites`
 * Added first draft of integration testing
 * Added batch command `compile-stats`
 * Added methods to create tasks that have basic conditional execution based on declared sources/products of the task
 * Added `newerThan` and `olderThan` methods to `Path`
 * Added `reload` action to reread the project definition without losing the performance benefits of an already running jvm
 * Added `help` action to tab completion
 * Added handling of (effectively empty) scala source files that create no class files: they are always interpreted as modified.
 * Added prompt to retry project loading if compilation fails
 * `package` action now uses `fileTask` so that it only executes if files are out of date
 * fixed `ScalaTest` framework wrapper so that it fails the `test` action if tests fail
 * Inline dependencies can now specify configurations

=== 0.3.1 to 0.3.2 ===
 * Compiled jar with Java 1.5.

=== 0.3 to 0.3.1 ===
 * Fixed bugs #8, #9, and #10.

=== 0.2.3 to 0.3 ===
 * Version change only for first release.

=== 0.2.2 to 0.2.3 ===

 * Added tests for `Dag`, `NameFilter`, `Version`
 * Fixed handling of trailing `*`s in `GlobFilter` and added some error-checking for control characters, which `Pattern` doesn't seem to like
 * Fixed `Analysis.allProducts` implementation
  * It previously returned the sources instead of the generated classes
  * Will only affect the count of classes (it should be correct now) and the debugging of missed classes (erroneously listed classes as missed)
 * Made some implied preconditions on `BasicVersion` and `OpaqueVersion` explicit
 * Made increment version behavior in `ScalaProject` easier to overload
 * Added `Seq[..Option]` alternative to `...Option*` for tasks
 * Documentation generation fixed to use latest value of version
 * Fixed `BasicVersion.incrementMicro`
 * Fixed test class loading so that `sbt` can test the version of `sbt` being developed (previously, the classes from the executing version of `sbt` were tested)


=== 0.2.1 to 0.2.2 ===
 * Package name is now a call-by-name parameter for the package action
 * Fixed release action calling compile multiple times

=== 0.2.0 to 0.2.1 ===

 * Added some action descriptions
 * jar name now comes from normalized name (lowercased and spaces to dashes)
 * Some cleanups related to creating filters
 * Path should only 'get' itself if the underlying file exists to be consistent with other `PathFinders`
 * Added `---` operator for `PathFinder` that excludes paths from the `PathFinder` argument
 * Removed `***` operator on `PathFinder`
 * `**` operator on `PathFinder` matches all descendents or self that match the `NameFilter` argument
 * The above should fix bug `#6`
 * Added version increment and release actions.
 * Can now build sbt with sbt.  Build scripts `build` and `clean` will still exist.

=== 0.1.9 to 0.2.0 ===

 * Implemented typed properties and access to system properties
 * Renamed `metadata` directory to `project`
 * Information previously in `info` file now obtained by properties:
  * `info.name --> name`
  * `info.currentVersion --> version`
 * Concrete `Project` subclasses should have a constructor that accepts a single argument of type `ProjectInfo` (argument `dependencies: Iterable[Project]` has been merged into `ProjectInfo`)

=== 0.1.8 to 0.1.9 ===

 * Better default implementation of `allSources`.
 * Generate warning if two jars on classpath have the same name.
 * Upgraded to specs 1.4.0
 * Upgraded to `ScalaCheck` 1.5
 * Changed some update options to be final vals instead of objects.
 * Added some more API documentation.
 * Removed release action.
 * Split compilation into separate main and test compilations.
 * A failure in a `ScalaTest` run now fails the test action.
 * Implemented reporters for `compile/scaladoc`, `ScalaTest`, `ScalaCheck`, and `specs` that delegate to the appropriate `sbt.Logger`.

=== 0.1.7 to 0.1.8 ===

 * Improved configuring of tests to exclude.
 * Simplified version handling.
 * Task `&&` operator properly handles dependencies of tasks it combines.
 * Changed method of inline library dependency declarations to be simpler.
 * Better handling of errors in parallel execution.

=== 0.1.6 to 0.1.7 ===

 * Added graph action to generate dot files (for graphiz) from dependency information (work in progress).
 * Options are now passed to tasks as varargs.
 * Redesigned `Path` properly, including `PathFinder` returning a `Set[Path]` now instead of `Iterable[Path]`.
 * Moved paths out of `ScalaProject` and into `BasicProjectPaths` to keep path definitions separate from task definitions.
 * Added initial support for managing third-party libraries through the `update` task, which must be explicitly called (it is not a dependency of compile or any other task).  This is experimental, undocumented, and known to be incomplete.
 * Parallel execution implementation at the project level, disabled by default. To enable, add:
 {{{
 override def parallelExecution = true
 }}}
 to your project definition.  In order for logging to make sense, all project logging is buffered until the project is finished executing.  Still to be done is some sort of notification of project execution (which ones are currently executing, how many remain)
 * `run` and `console` are now specified as "interactive" actions, which means they are only executed on the project in which they are defined when called directly, and not on all dependencies.  Their dependencies are still run on dependent projects.
 * Generalized conditional tasks a bit. Of note is that analysis is no longer required to be in metadata/analysis, but is now in target/analysis by default.
 * Message now displayed when project definition is recompiled on startup
 * Project no longer inherits from Logger, but now has a log member.
 * Dependencies passed to `project` are checked for null (may help with errors related to initialization/circular dependencies)
 * Task dependencies are checked for null
 * Projects in a multi-project configuration are checked to ensure that output paths are different (check can be disabled)
 * Made `update` task globally synchronized because Ivy is not thread-safe.
 * Generalized test framework, directly invoking frameworks now (used reflection before).
 * Moved license files to licenses/
 * Added support for `specs` and some support for `ScalaTest` (the test action doesn't fail if `ScalaTest` tests fail).
 * Added `specs`, `ScalaCheck`, `ScalaTest` jars to lib/
  * These are now required for compilation, but are optional at runtime.
  * Added the appropriate licenses and notices.
 * Options for `update` action are now taken from updateOptions member.
 * Fixed `SbtManager` inline dependency manager to work properly.
 * Improved Ivy configuration handling (not compiled with test dependencies yet though).
 * Added case class implementation of `SbtManager` called `SimpleManager`.
 * Project definitions not specifying dependencies can now use just a single argument constructor.

=== 0.1.5 to 0.1.6 ===

 * `run` and `console` handle `System.exit` and multiple threads in user code under certain circumstances (see RunningProjectCode).

=== 0.1.4 to 0.1.5 ===

 * Generalized interface with plugin (see `AnalysisCallback`)
 * Split out task implementations and paths from `Project` to `ScalaProject`
 * Subproject support (changed required project constructor signature: see `sbt/DefaultProject.scala`)
  * Can specify dependencies between projects
  * Execute tasks across multiple projects
  * Classpath of all dependencies included when compiling
  * Proper inter-project source dependency handling
  * Can change to a project in an interactive session to work only on that project (and its dependencies)
 * External dependency handling
  * Tracks non-source dependencies (compiled classes and jars)
  * Requires each class to be provided by exactly one classpath element (This means you cannot have two versions of the same class on the classpath, e.g. from two versions of a library)
  * Changes in a project propagate the right source recompilations in dependent projects
  * Consequences:
   * Recompilation when changing java/scala version
   * Recompilation when upgrading libraries (again, as indicated in the second point, situations where you have library-1.0.jar and library-2.0.jar on the classpath at the same time are not handled predictably.  Replacing library-1.0.jar with library-2.0.jar should work as expected.)
   * Changing sbt version will recompile project definitions

=== 0.1.3 to 0.1.4 ===

 * Autodetection of Project definitions.
 * Simple tab completion/history in an interactive session with JLine
 * Added descriptions for most actions

=== 0.1.2 to 0.1.3 ===

 * Dependency management between tasks and auto-discovery tasks.
 * Should work on Windows.

=== 0.1.1 to 0.1.2 ===

 * Should compile/build on Java 1.5
 * Fixed run action implementation to include scala library on classpath
 * Made project configuration easier (see BuildConfiguration in the Wiki)

=== 0.1 to 0.1.1 ===

 * Fixed handling of source files without a package
 * Added easy project setup