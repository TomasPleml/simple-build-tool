= Compiler Plugin Support =

As of `sbt` 0.4.4 (currently trunk), there is special support for compiler plugins.  You can mixin the `AutoCompilerPlugins` trait to your project definition to enable this functionality.

To use a compiler plugin, you either put it in your unmanaged library directory (`lib`) or add it as managed dependency in the `plugin` configuration.

`compilerPlugin` is a convenience method for specifying `plugin->default` as the configuration for a dependency:
{{{
   val sxr = compilerPlugin("sxr" % "sxr" % "0.1")
}}}

Alternatively, you can use inline Ivy XML:
{{{
   override def ivyXML =
      <dependencies>
         <dependency org="sxr" name="sxr" rev="0.1" conf="plugin->default"/>
      </dependencies>
}}}

A managed dependency has to be resolved and retrieved like usual by running `update`.

The `compile` and `test-compile` actions will use any compiler plugins found in the `lib` directory or in the `plugin` configuration.  You are responsible for configuring the plugins as necessary, for example:

{{{
  override def compileOptions = CompileOption("-Psxr:base-directory:...") :: super.compileOptions.toList
}}}