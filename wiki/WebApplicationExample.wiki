= Hello Lift Example =

This page provides an example of building a [http://liftweb.net Lift] web application.

== Get the example ==

Download the [http://liftweb.net/index.php/HowTo_start_a_new_liftwebapp Hello Lift example] using maven and change to the new directory.

{{{
$ mvn archetype:create -U \
 -DarchetypeGroupId=net.liftweb \
 -DarchetypeArtifactId=lift-archetype-basic \
 -DarchetypeVersion=1.0 \
 -DremoteRepositories=http://scala-tools.org/repo-releases \
 -DgroupId=net.liftweb.hello -DartifactId=hello-lift

$ cd hello-lift
}}}

== Setup the `sbt` project ==

Run `sbt` and provide the project name and version:

{{{
$ sbt
Project does not exist, create new project? (y/N) : y
Name: Hello Lift
Organization [empty]: net.liftweb.hello
Version [1.0]: 1.0
Scala version [2.7.5]: 2.7.3
sbt version [0.5.4]:
...
[success] Successfully initialized directory structure.
[info] Building project Hello Lift 1.0 using sbt.DefaultProject
[info] No actions specified, interactive session started. Execute 'help' for more information.
>
}}}

== Create the custom project configuration ==

Use the following project definition (put it in `project/build/HelloLiftProject.scala`) to enable the web application features and declare dependencies.  Afterwards, run `reload` so that `sbt` reloads the project definition.

{{{
import sbt._

class HelloLiftProject(info: ProjectInfo) extends DefaultWebProject(info)
{
  val lift = "net.liftweb" % "lift-core" % "1.0" % "compile->default"
  val jetty6 = "org.mortbay.jetty" % "jetty" % "6.1.14" % "test->default"
  val servlet = "javax.servlet" % "servlet-api" % "2.5" % "provided->default"
  val derby = "org.apache.derby" % "derby" % "10.2.2.0" % "runtime->default"
  val junit = "junit" % "junit" % "3.8.1" % "test->default"

  // required because Ivy doesn't pull repositories from poms
  val smackRepo = "m2-repository-smack" at "http://maven.reucon.com/public"
}
}}}

Run `reload` to use the new project definition:
{{{
> reload
}}}

== Get the dependencies ==

`sbt` does not resolve dependencies unless explicitly requested, so run `update`:
{{{
> update
}}}

== Try it out ==

Now, start the webapp:
{{{
> jetty-run
}}}

and browse to http://localhost:8080.

Stop the webapp when you are done:
{{{
> jetty-stop
}}}

To create a war file, run the `package` action.  `DefaultWebProject` redefines `package` to create a war instead of a jar.

{{{
> package
}}}

For more details on web application support in `sbt`, see [WebApplications Web Applications].